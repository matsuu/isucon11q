.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.42)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "ShellQuote 3"
.TH ShellQuote 3 "2010-06-11" "perl v5.34.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
String::ShellQuote \- quote strings for passing through the shell
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&    $string = shell_quote @list;
\&    $string = shell_quote_best_effort @list;
\&    $string = shell_comment_quote $string;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module contains some functions which are useful for quoting strings
which are going to pass through the shell or a shell-like object.
.IP "\fBshell_quote\fR [\fIstring\fR]..." 4
.IX Item "shell_quote [string]..."
\&\fBshell_quote\fR quotes strings so they can be passed through the shell.
Each \fIstring\fR is quoted so that the shell will pass it along as a
single argument and without further interpretation.  If no \fIstring\fRs
are given an empty string is returned.
.Sp
If any \fIstring\fR can't be safely quoted \fBshell_quote\fR will \fBcroak\fR.
.IP "\fBshell_quote_best_effort\fR [\fIstring\fR]..." 4
.IX Item "shell_quote_best_effort [string]..."
This is like \fBshell_quote\fR, excpet if the string can't be safely quoted
it does the best it can and returns the result, instead of dying.
.IP "\fBshell_comment_quote\fR [\fIstring\fR]" 4
.IX Item "shell_comment_quote [string]"
\&\fBshell_comment_quote\fR quotes the \fIstring\fR so that it can safely be
included in a shell-style comment (the current algorithm is that a sharp
character is placed after any newlines in the string).
.Sp
This routine might be changed to accept multiple \fIstring\fR arguments
in the future.  I haven't done this yet because I'm not sure if the
\&\fIstring\fRs should be joined with blanks ($") or nothing ($,).  Cast
your vote today!  Be sure to justify your answer.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
.Vb 2
\&    $cmd = \*(Aqfuser 2>/dev/null \*(Aq . shell_quote @files;
\&    @pids = split \*(Aq \*(Aq, \`$cmd\`;
\&
\&    print CFG "# Configured by: ",
\&                shell_comment_quote($ENV{LOGNAME}), "\en";
.Ve
.SH "BUGS"
.IX Header "BUGS"
Only Bourne shell quoting is supported.  I'd like to add other shells
(particularly cmd.exe), but I'm not familiar with them.  It would be a
big help if somebody supplied the details.
.SH "AUTHOR"
.IX Header "AUTHOR"
Roderick Schertler <\fIroderick@argon.org\fR>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fBperl\fR\|(1).
