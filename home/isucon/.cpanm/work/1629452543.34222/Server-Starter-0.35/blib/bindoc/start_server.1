.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.42)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "START_SERVER 1"
.TH START_SERVER 1 "2021-08-20" "perl v5.34.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
start_server \- a superdaemon for hot\-deploying server programs
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  start_server [options] \-\- server\-prog server\-arg1 server\-arg2 ...
\&
\&  # start Plack using Starlet listening at TCP port 8000
\&  start_server \-\-port=8000 \-\- plackup \-s Starlet \-\-max\-workers=100 index.psgi
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This script is a frontend of Server::Starter.  For more information please refer to the documentation of the module.
.SH "OPTIONS"
.IX Header "OPTIONS"
.SS "\-\-port=(port|host:port|port=fd|host:port=fd)"
.IX Subsection "--port=(port|host:port|port=fd|host:port=fd)"
\&\s-1TCP\s0 port to listen to (if omitted, will not bind to any ports)
.PP
If host is not specified, then the program will bind to the default address of IPv4 (\*(L"0.0.0.0\*(R").
Square brackets should be used to specify an IPv6 address (e.g. \-\-port=[::1]:8080)
.PP
If fd is specified, then start_server allocates the socket at the given number.
.PP
The command binds to \s-1UDP\s0 ports if the port numbers are prefixed by \*(L"u\*(R" (e.g., \-\-port=u443).
.SS "\-\-path=path"
.IX Subsection "--path=path"
path at where to listen using unix socket (optional)
.SS "\-\-dir=path"
.IX Subsection "--dir=path"
working directory, start_server do chdir to before exec (optional)
.SS "\-\-interval=seconds"
.IX Subsection "--interval=seconds"
minimum interval to respawn the server program (default: 1)
.SS "\-\-signal\-on\-hup=SIGNAL"
.IX Subsection "--signal-on-hup=SIGNAL"
name of the signal to be sent to the server process when start_server receives a \s-1SIGHUP\s0 (default: \s-1SIGTERM\s0). If you use this option, be sure to also use \f(CW\*(C`\-\-signal\-on\-term\*(C'\fR below.
.SS "\-\-signal\-on\-term=SIGNAL"
.IX Subsection "--signal-on-term=SIGNAL"
name of the signal to be sent to the server process when start_server receives a \s-1SIGTERM\s0 (default: \s-1SIGTERM\s0)
.SS "\-\-pid\-file=filename"
.IX Subsection "--pid-file=filename"
if set, writes the process id of the start_server process to the file
.SS "\-\-status\-file=filename"
.IX Subsection "--status-file=filename"
if set, writes the status of the server process(es) to the file
.SS "\-\-envdir=ENVDIR"
.IX Subsection "--envdir=ENVDIR"
directory that contains environment variables to the server processes and superdaemon.
It is inspired by \f(CW\*(C`envdir\*(C'\fR in \f(CW\*(C`daemontools\*(C'\fR.
This can be overwritten by environment variable \f(CW\*(C`ENVDIR\*(C'\fR.
.SS "\-\-log\-file=file"
.IX Subsection "--log-file=file"
.ie n .SS "\-\-log\-file=""| cmd args..."""
.el .SS "\-\-log\-file=``| cmd args...''"
.IX Subsection "--log-file=| cmd args..."
if set, redirects \s-1STDOUT\s0 and \s-1STDERR\s0 to given file or command
.SS "\-\-daemonize"
.IX Subsection "--daemonize"
deamonizes the server (by doing fork,setsid,fork).  Must be used together with \f(CW\*(C`\-\-log\-file\*(C'\fR.
.SS "\-\-enable\-auto\-restart"
.IX Subsection "--enable-auto-restart"
enables automatic restart by time.
This can be overwritten by environment variable \f(CW\*(C`ENABLE_AUTO_RESTART\*(C'\fR.
.SS "\-\-auto\-restart\-interval=seconds"
.IX Subsection "--auto-restart-interval=seconds"
automatic restart interval (default 360). It is used with \f(CW\*(C`\-\-enable\-auto\-restart\*(C'\fR option.
This can be overwritten by environment variable \f(CW\*(C`AUTO_RESTART_INTERVAL\*(C'\fR.
.SS "\-\-kill\-old\-delay=seconds"
.IX Subsection "--kill-old-delay=seconds"
time to suspend to send a signal to the old worker. The default value is 5 when \f(CW\*(C`\-\-enable\-auto\-restart\*(C'\fR is set, 0 otherwise.
This can be overwritten by environment variable \f(CW\*(C`KILL_OLD_DELAY\*(C'\fR.
.SS "\-\-backlog=size"
.IX Subsection "--backlog=size"
specifies a listen backlog parameter, whose default is \s-1SOMAXCONN\s0 (usually 128 on Linux). While \s-1SOMAXCONN\s0 is enough for most loads, large backlog is required for heavy loads.
.SS "\-\-restart"
.IX Subsection "--restart"
this is a wrapper command that reads the pid of the start_server process from \-\-pid\-file, sends \s-1SIGHUP\s0 to the process and waits until the server(s) of the older generation(s) die by monitoring the contents of the \-\-status\-file
.SS "\-\-stop"
.IX Subsection "--stop"
this is a wrapper command that reads the pid of the start_server process from \-\-pid\-file, sends \s-1SIGTERM\s0 to the process.
.SS "\-\-help"
.IX Subsection "--help"
prints this help
.SS "\-\-version"
.IX Subsection "--version"
prints the version number
.SH "AUTHOR"
.IX Header "AUTHOR"
Kazuho Oku
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Server::Starter
.SH "LICENSE"
.IX Header "LICENSE"
This library is free software; you can redistribute it and/or modify it under the same terms as Perl itself.
