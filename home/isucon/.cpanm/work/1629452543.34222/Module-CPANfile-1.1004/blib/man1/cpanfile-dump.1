.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.42)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "CPANFILE-DUMP 1"
.TH CPANFILE-DUMP 1 "2018-04-26" "perl v5.34.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
cpanfile\-dump \- Dump prerequisites from a cpanfile
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  # Install typical required and recommended modules
\&  cpan \`cpanfile\-dump\`
\&
\&  # Skip configures phase
\&  cpan \`cpanfile\-dump \-\-no\-configure\`
\&
\&  # Also include develop phase and suggests type 
\&  cpan \`cpanfile\-dump \-\-develop \-\-suggests\`
\&
\&  # Include a feature
\&  cpan \`cpanfile\-dump \-\-with\-feature=sqlite\`
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This script reads prereqs from a \fIcpanfile\fR and dumps a raw list of
them to standard output.  This is useful for piping these as input to
another program that doesn't support reading cpanfile directly,
i.e. \f(CW\*(C`cpan\*(C'\fR or \f(CW\*(C`cpanp\*(C'\fR.
.PP
By default, it prints configure, build, test and runtime requirements and
recommendations.  Command line options can be used to modify the default
choices.
.PP
This script is distributed with Module::CPANfile since version 1.0002.
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\-\-configure, \-\-build, \-\-test, \-\-runtime, \-\-develop" 4
.IX Item "--configure, --build, --test, --runtime, --develop"
Specify the phase to include/exclude. Defaults to include all but
\&\f(CW\*(C`\-\-develop\*(C'\fR but you can exclude some phases by specifying the options with
\&\f(CW\*(C`\-\-no\-\*(C'\fR prefix, like \f(CW\*(C`\-\-no\-configure\*(C'\fR.
.IP "\-\-requires, \-\-recommends, \-\-suggests, \-\-conflicts" 4
.IX Item "--requires, --recommends, --suggests, --conflicts"
Specify the type to include/exclude. Defaults to include only \f(CW\*(C`\-\-requires\*(C'\fR and
\&\f(CW\*(C`\-\-recommends\*(C'\fR but you can exclude some types by specifying the options with
\&\f(CW\*(C`\-\-no\-\*(C'\fR prefix, like \f(CW\*(C`\-\-no\-recommends\*(C'\fR.
.Sp
Specifying \f(CW\*(C`\-\-conflicts\*(C'\fR will turn off all other types (even if specified
on the command line).
.IP "\-\-with\-feature, \-\-with\-all\-features, \-\-without\-feature" 4
.IX Item "--with-feature, --with-all-features, --without-feature"
.Vb 2
\&    cpanfile\-dump \-\-with\-feature=sqlite
\&    cpanfile\-dump \-\-with\-all\-features \-\-without\-feature=yaml
.Ve
.Sp
Specify features to include in the dump.  \f(CW\*(C`\-\-with\-feature\*(C'\fR and \f(CW\*(C`\-\-without\-feature\*(C'\fR
may be used more than once.
.SH "NOTES"
.IX Header "NOTES"
Because \f(CW\*(C`cpanm\*(C'\fR supports reading cpanfile directly, instead of piping the output of this
program, you're recommended to use \f(CW\*(C`cpanm \-\-installdeps .\*(C'\fR to install modules from cpanfile.
.SH "AUTHOR"
.IX Header "AUTHOR"
David Golden
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Module::CPANfile cpanfile App::mymeta_requires
