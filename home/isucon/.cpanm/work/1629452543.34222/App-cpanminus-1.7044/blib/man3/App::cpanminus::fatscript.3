.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.42)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "App::cpanminus::fatscript 3"
.TH App::cpanminus::fatscript 3 "2018-04-19" "perl v5.34.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
cpanm \- get, unpack build and install modules from CPAN
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 10
\&  cpanm Test::More                                 # install Test::More
\&  cpanm MIYAGAWA/Plack\-0.99_05.tar.gz              # full distribution path
\&  cpanm http://example.org/LDS/CGI.pm\-3.20.tar.gz  # install from URL
\&  cpanm ~/dists/MyCompany\-Enterprise\-1.00.tar.gz   # install from a local file
\&  cpanm \-\-interactive Task::Kensho                 # Configure interactively
\&  cpanm .                                          # install from local directory
\&  cpanm \-\-installdeps .                            # install all the deps for the current directory
\&  cpanm \-L extlib Plack                            # install Plack and all non\-core deps into extlib
\&  cpanm \-\-mirror http://cpan.cpantesters.org/ DBI  # use the fast\-syncing mirror
\&  cpanm \-\-from https://cpan.metacpan.org/ Plack    # use only the HTTPS mirror
.Ve
.SH "COMMANDS"
.IX Header "COMMANDS"
.IP "(arguments)" 4
.IX Item "(arguments)"
Command line arguments can be either a module name, distribution file,
local file path, \s-1HTTP URL\s0 or git repository \s-1URL.\s0 Following commands
will all work as you expect.
.Sp
.Vb 6
\&    cpanm Plack
\&    cpanm Plack/Request.pm
\&    cpanm MIYAGAWA/Plack\-1.0000.tar.gz
\&    cpanm /path/to/Plack\-1.0000.tar.gz
\&    cpanm http://cpan.metacpan.org/authors/id/M/MI/MIYAGAWA/Plack\-0.9990.tar.gz
\&    cpanm git://github.com/plack/Plack.git
.Ve
.Sp
Additionally, you can use the notation using \f(CW\*(C`~\*(C'\fR and \f(CW\*(C`@\*(C'\fR to specify
version for a given module. \f(CW\*(C`~\*(C'\fR specifies the version requirement in
the CPAN::Meta::Spec format, while \f(CW\*(C`@\*(C'\fR pins the exact version, and
is a shortcut for \f(CW\*(C`~"== VERSION"\*(C'\fR.
.Sp
.Vb 3
\&    cpanm Plack~1.0000                 # 1.0000 or later
\&    cpanm Plack~">= 1.0000, < 2.0000"  # latest of 1.xxxx
\&    cpanm Plack@0.9990                 # specific version. same as Plack~"== 0.9990"
.Ve
.Sp
The version query including specific version or range will be sent to
MetaCPAN to search for previous releases. The query will search for
BackPAN archives by default, unless you specify \f(CW\*(C`\-\-dev\*(C'\fR option, in
which case, archived versions will be filtered out.
.Sp
For a git repository, you can specify a branch, tag, or commit \s-1SHA\s0 to
build. The default is \f(CW\*(C`master\*(C'\fR
.Sp
.Vb 2
\&    cpanm git://github.com/plack/Plack.git@1.0000        # tag
\&    cpanm git://github.com/plack/Plack.git@devel         # branch
.Ve
.IP "\-i, \-\-install" 4
.IX Item "-i, --install"
Installs the modules. This is a default behavior and this is just a
compatibility option to make it work like cpan or cpanp.
.IP "\-\-self\-upgrade" 4
.IX Item "--self-upgrade"
Upgrades itself. It's just an alias for:
.Sp
.Vb 1
\&  cpanm App::cpanminus
.Ve
.IP "\-\-info" 4
.IX Item "--info"
Displays the distribution information in
\&\f(CW\*(C`AUTHOR/Dist\-Name\-ver.tar.gz\*(C'\fR format in the standard out.
.IP "\-\-installdeps" 4
.IX Item "--installdeps"
Installs the dependencies of the target distribution but won't build
itself. Handy if you want to try the application from a version
controlled repository such as git.
.Sp
.Vb 1
\&  cpanm \-\-installdeps .
.Ve
.IP "\-\-look" 4
.IX Item "--look"
Download and unpack the distribution and then open the directory with
your shell. Handy to poke around the source code or do manual
testing.
.IP "\-h, \-\-help" 4
.IX Item "-h, --help"
Displays the help message.
.IP "\-V, \-\-version" 4
.IX Item "-V, --version"
Displays the version number.
.SH "OPTIONS"
.IX Header "OPTIONS"
You can specify the default options in \f(CW\*(C`PERL_CPANM_OPT\*(C'\fR environment variable.
.IP "\-f, \-\-force" 4
.IX Item "-f, --force"
Force install modules even when testing failed.
.IP "\-n, \-\-notest" 4
.IX Item "-n, --notest"
Skip the testing of modules. Use this only when you just want to save
time for installing hundreds of distributions to the same perl and
architecture you've already tested to make sure it builds fine.
.Sp
Defaults to false, and you can say \f(CW\*(C`\-\-no\-notest\*(C'\fR to override when it
is set in the default options in \f(CW\*(C`PERL_CPANM_OPT\*(C'\fR.
.IP "\-\-test\-only" 4
.IX Item "--test-only"
Run the tests only, and do not install the specified module or
distributions. Handy if you want to verify the new (or even old)
releases pass its unit tests without installing the module.
.Sp
Note that if you specify this option with a module or distribution
that has dependencies, these dependencies will be installed if you
don't currently have them.
.IP "\-S, \-\-sudo" 4
.IX Item "-S, --sudo"
Switch to the root user with \f(CW\*(C`sudo\*(C'\fR when installing modules. Use this
if you want to install modules to the system perl include path.
.Sp
Defaults to false, and you can say \f(CW\*(C`\-\-no\-sudo\*(C'\fR to override when it is
set in the default options in \f(CW\*(C`PERL_CPANM_OPT\*(C'\fR.
.IP "\-v, \-\-verbose" 4
.IX Item "-v, --verbose"
Makes the output verbose. It also enables the interactive
configuration. (See \-\-interactive)
.IP "\-q, \-\-quiet" 4
.IX Item "-q, --quiet"
Makes the output even more quiet than the default. It only shows the
successful/failed dependencies to the output.
.IP "\-l, \-\-local\-lib" 4
.IX Item "-l, --local-lib"
Sets the local::lib compatible path to install modules to. You
don't need to set this if you already configure the shell environment
variables using local::lib, but this can be used to override that
as well.
.IP "\-L, \-\-local\-lib\-contained" 4
.IX Item "-L, --local-lib-contained"
Same with \f(CW\*(C`\-\-local\-lib\*(C'\fR but with \-\-self\-contained set.  All
non-core dependencies will be installed even if they're already
installed.
.Sp
For instance,
.Sp
.Vb 1
\&  cpanm \-L extlib Plack
.Ve
.Sp
would install Plack and all of its non-core dependencies into the
directory \f(CW\*(C`extlib\*(C'\fR, which can be loaded from your application with:
.Sp
.Vb 1
\&  use local::lib \*(Aq/path/to/extlib\*(Aq;
.Ve
.Sp
Note that this option does \fB\s-1NOT\s0\fR reliably work with perl installations
supplied by operating system vendors that strips standard modules from perl,
such as \s-1RHEL,\s0 Fedora and CentOS, \fB\s-1UNLESS\s0\fR you also install packages supplying
all the modules that have been stripped.  For these systems you will probably
want to install the \f(CW\*(C`perl\-core\*(C'\fR meta-package which does just that.
.IP "\-\-self\-contained" 4
.IX Item "--self-contained"
When examining the dependencies, assume no non-core modules are
installed on the system. Handy if you want to bundle application
dependencies in one directory so you can distribute to other machines.
.IP "\-\-exclude\-vendor" 4
.IX Item "--exclude-vendor"
Don't include modules installed under the 'vendor' paths when searching for
core modules when the \f(CW\*(C`\-\-self\-contained\*(C'\fR flag is in effect.  This restores
the behaviour from before version 1.7023
.IP "\-\-mirror" 4
.IX Item "--mirror"
Specifies the base \s-1URL\s0 for the \s-1CPAN\s0 mirror to use, such as
\&\f(CW\*(C`http://cpan.cpantesters.org/\*(C'\fR (you can omit the trailing slash). You
can specify multiple mirror URLs by repeating the command line option.
.Sp
You can use a local directory that has a \s-1CPAN\s0 mirror structure
(created by tools such as OrePAN or Pinto) by using a special
\&\s-1URL\s0 scheme \f(CW\*(C`file://\*(C'\fR. If the given \s-1URL\s0 begins with `/` (without any
scheme), it is considered as a file scheme as well.
.Sp
.Vb 2
\&  cpanm \-\-mirror file:///path/to/mirror
\&  cpanm \-\-mirror ~/minicpan      # Because shell expands ~ to /home/user
.Ve
.Sp
Defaults to \f(CW\*(C`http://www.cpan.org/\*(C'\fR.
.IP "\-\-mirror\-only" 4
.IX Item "--mirror-only"
Download the mirror's 02packages.details.txt.gz index file instead of
querying the \s-1CPAN\s0 Meta \s-1DB.\s0 This will also effectively opt out sending
your local perl versions to backend database servers such as \s-1CPAN\s0 Meta
\&\s-1DB\s0 and MetaCPAN.
.Sp
Select this option if you are using a local mirror of \s-1CPAN,\s0 such as
minicpan when you're offline, or your own \s-1CPAN\s0 index (a.k.a darkpan).
.IP "\-\-from, \-M" 4
.IX Item "--from, -M"
.Vb 2
\&  cpanm \-M https://cpan.metacpan.org/
\&  cpanm \-\-from https://cpan.metacpan.org/
.Ve
.Sp
Use the given mirror \s-1URL\s0 and its index as the \fIonly\fR source to search
and download modules from.
.Sp
It works similar to \f(CW\*(C`\-\-mirror\*(C'\fR and \f(CW\*(C`\-\-mirror\-only\*(C'\fR combined, with a
small difference: unlike \f(CW\*(C`\-\-mirror\*(C'\fR which \fIappends\fR the \s-1URL\s0 to the
list of mirrors, \f(CW\*(C`\-\-from\*(C'\fR (or \f(CW\*(C`\-M\*(C'\fR for short) uses the specified \s-1URL\s0
as its \fIonly\fR source to download index and modules from. This makes
the option always override the default mirror, which might have been
set via global options such as the one set by \f(CW\*(C`PERL_CPANM_OPT\*(C'\fR
environment variable.
.Sp
\&\fBTip:\fR It might be useful if you name these options with your shell
aliases, like:
.Sp
.Vb 2
\&  alias minicpanm=\*(Aqcpanm \-\-from ~/minicpan\*(Aq
\&  alias darkpan=\*(Aqcpanm \-\-from http://mycompany.example.com/DPAN\*(Aq
.Ve
.IP "\-\-mirror\-index" 4
.IX Item "--mirror-index"
\&\fB\s-1EXPERIMENTAL\s0\fR: Specifies the file path to \f(CW\*(C`02packages.details.txt\*(C'\fR
for module search index.
.IP "\-\-cpanmetadb" 4
.IX Item "--cpanmetadb"
\&\fB\s-1EXPERIMENTAL\s0\fR: Specifies an alternate \s-1URI\s0 for \s-1CPAN\s0 MetaDB index lookups.
.IP "\-\-metacpan" 4
.IX Item "--metacpan"
Prefers MetaCPAN \s-1API\s0 over \s-1CPAN\s0 MetaDB.
.IP "\-\-cpanfile" 4
.IX Item "--cpanfile"
\&\fB\s-1EXPERIMENTAL\s0\fR: Specified an alternate path for cpanfile to search for,
when \f(CW\*(C`\-\-installdeps\*(C'\fR command is in use. Defaults to \f(CW\*(C`cpanfile\*(C'\fR.
.IP "\-\-prompt" 4
.IX Item "--prompt"
Prompts when a test fails so that you can skip, force install, retry
or look in the shell to see what's going wrong. It also prompts when
one of the dependency failed if you want to proceed the installation.
.Sp
Defaults to false, and you can say \f(CW\*(C`\-\-no\-prompt\*(C'\fR to override if it's
set in the default options in \f(CW\*(C`PERL_CPANM_OPT\*(C'\fR.
.IP "\-\-dev" 4
.IX Item "--dev"
\&\fB\s-1EXPERIMENTAL\s0\fR: search for a newer developer release as well. Defaults to false.
.IP "\-\-reinstall" 4
.IX Item "--reinstall"
cpanm, when given a module name in the command line (i.e. \f(CW\*(C`cpanm
Plack\*(C'\fR), checks the locally installed version first and skips if it is
already installed. This option makes it skip the check, so:
.Sp
.Vb 1
\&  cpanm \-\-reinstall Plack
.Ve
.Sp
would reinstall Plack even if your locally installed version is
latest, or even newer (which would happen if you install a developer
release from version control repositories).
.Sp
Defaults to false.
.IP "\-\-interactive" 4
.IX Item "--interactive"
Makes the configuration (such as \f(CW\*(C`Makefile.PL\*(C'\fR and \f(CW\*(C`Build.PL\*(C'\fR)
interactive, so you can answer questions in the distribution that
requires custom configuration or Task:: distributions.
.Sp
Defaults to false, and you can say \f(CW\*(C`\-\-no\-interactive\*(C'\fR to override
when it's set in the default options in \f(CW\*(C`PERL_CPANM_OPT\*(C'\fR.
.IP "\-\-pp, \-\-pureperl" 4
.IX Item "--pp, --pureperl"
Prefer Pure perl build of modules by setting \f(CW\*(C`PUREPERL_ONLY=1\*(C'\fR for
MakeMaker and \f(CW\*(C`\-\-pureperl\-only\*(C'\fR for Build.PL based
distributions. Note that not all of the \s-1CPAN\s0 modules support this
convention yet.
.IP "\-\-with\-recommends, \-\-with\-suggests" 4
.IX Item "--with-recommends, --with-suggests"
\&\fB\s-1EXPERIMENTAL\s0\fR: Installs dependencies declared as \f(CW\*(C`recommends\*(C'\fR and
\&\f(CW\*(C`suggests\*(C'\fR respectively, per \s-1META\s0 spec. When these dependencies fail
to install, cpanm continues the installation, since they're just
recommendation/suggestion.
.Sp
Enabling this could potentially make a circular dependency for a few
modules on \s-1CPAN,\s0 when \f(CW\*(C`recommends\*(C'\fR adds a module that \f(CW\*(C`recommends\*(C'\fR
back the module in return.
.Sp
There's also \f(CW\*(C`\-\-without\-recommend\*(C'\fR and \f(CW\*(C`\-\-without\-suggests\*(C'\fR to
override the default decision made earlier in \f(CW\*(C`PERL_CPANM_OPT\*(C'\fR.
.Sp
Defaults to false for both.
.IP "\-\-with\-develop" 4
.IX Item "--with-develop"
\&\fB\s-1EXPERIMENTAL\s0\fR: Installs develop phase dependencies in \s-1META\s0 files or
\&\f(CW\*(C`cpanfile\*(C'\fR when used with \f(CW\*(C`\-\-installdeps\*(C'\fR. Defaults to false.
.IP "\-\-with\-configure" 4
.IX Item "--with-configure"
\&\fB\s-1EXPERIMENTAL\s0\fR: Installs configure phase dependencies in \f(CW\*(C`cpanfile\*(C'\fR
when used with \f(CW\*(C`\-\-installdeps\*(C'\fR. Defaults to false.
.IP "\-\-with\-feature, \-\-without\-feature, \-\-with\-all\-features" 4
.IX Item "--with-feature, --without-feature, --with-all-features"
\&\fB\s-1EXPERIMENTAL\s0\fR: Specifies the feature to enable, if a module supports
optional features per \s-1META\s0 spec 2.0.
.Sp
.Vb 1
\&    cpanm \-\-with\-feature=opt_csv Spreadsheet::Read
.Ve
.Sp
the features can also be interactively chosen when \f(CW\*(C`\-\-interactive\*(C'\fR
option is enabled.
.Sp
\&\f(CW\*(C`\-\-with\-all\-features\*(C'\fR enables all the optional features, and
\&\f(CW\*(C`\-\-without\-feature\*(C'\fR can select a feature to disable.
.IP "\-\-configure\-timeout, \-\-build\-timeout, \-\-test\-timeout" 4
.IX Item "--configure-timeout, --build-timeout, --test-timeout"
Specify the timeout length (in seconds) to wait for the configure,
build and test process. Current default values are: 60 for configure,
3600 for build and 1800 for test.
.IP "\-\-configure\-args, \-\-build\-args, \-\-test\-args, \-\-install\-args" 4
.IX Item "--configure-args, --build-args, --test-args, --install-args"
\&\fB\s-1EXPERIMENTAL\s0\fR: Pass arguments for configure/build/test/install
commands respectively, for a given module to install.
.Sp
.Vb 1
\&    cpanm DBD::mysql \-\-configure\-args="\-\-cflags=... \-\-libs=..."
.Ve
.Sp
The argument is only enabled for the module passed as a command line
argument, not dependencies.
.IP "\-\-scandeps" 4
.IX Item "--scandeps"
\&\fB\s-1DEPRECATED\s0\fR: Scans the depencencies of given modules and output the
tree in a text format. (See \f(CW\*(C`\-\-format\*(C'\fR below for more options)
.Sp
Because this command doesn't actually install any distributions, it
will be useful that by typing:
.Sp
.Vb 1
\&  cpanm \-\-scandeps Catalyst::Runtime
.Ve
.Sp
you can make sure what modules will be installed.
.Sp
This command takes into account which modules you already have
installed in your system. If you want to see what modules will be
installed against a vanilla perl installation, you might want to
combine it with \f(CW\*(C`\-L\*(C'\fR option.
.IP "\-\-format" 4
.IX Item "--format"
\&\fB\s-1DEPRECATED\s0\fR: Determines what format to display the scanned
dependency tree. Available options are \f(CW\*(C`tree\*(C'\fR, \f(CW\*(C`json\*(C'\fR, \f(CW\*(C`yaml\*(C'\fR and
\&\f(CW\*(C`dists\*(C'\fR.
.RS 4
.IP "tree" 8
.IX Item "tree"
Displays the tree in a plain text format. This is the default value.
.IP "json, yaml" 8
.IX Item "json, yaml"
Outputs the tree in a \s-1JSON\s0 or \s-1YAML\s0 format. \s-1JSON\s0 and \s-1YAML\s0 modules
need to be installed respectively. The output tree is represented as a
recursive tuple of:
.Sp
.Vb 1
\&  [ distribution, dependencies ]
.Ve
.Sp
and the container is an array containing the root elements. Note that
there may be multiple root nodes, since you can give multiple modules
to the \f(CW\*(C`\-\-scandeps\*(C'\fR command.
.IP "dists" 8
.IX Item "dists"
\&\f(CW\*(C`dists\*(C'\fR is a special output format, where it prints the distribution
filename in the \fIdepth first order\fR after the dependency resolution,
like:
.Sp
.Vb 5
\&  GAAS/MIME\-Base64\-3.13.tar.gz
\&  GAAS/URI\-1.58.tar.gz
\&  PETDANCE/HTML\-Tagset\-3.20.tar.gz
\&  GAAS/HTML\-Parser\-3.68.tar.gz
\&  GAAS/libwww\-perl\-5.837.tar.gz
.Ve
.Sp
which means you can install these distributions in this order without
extra dependencies. When combined with \f(CW\*(C`\-L\*(C'\fR option, it will be useful
to replay installations on other machines.
.RE
.RS 4
.RE
.IP "\-\-save\-dists" 4
.IX Item "--save-dists"
Specifies the optional directory path to copy downloaded tarballs in
the \s-1CPAN\s0 mirror compatible directory structure
i.e. \fIauthors/id/A/AU/AUTHORS/Foo\-Bar\-version.tar.gz\fR
.Sp
If the distro tarball did not come from \s-1CPAN,\s0 for example from a local
file or from GitHub, then it will be saved under
\&\fIvendor/Foo\-Bar\-version.tar.gz\fR.
.IP "\-\-uninst\-shadows" 4
.IX Item "--uninst-shadows"
Uninstalls the shadow files of the distribution that you're
installing. This eliminates the confusion if you're trying to install
core (dual-life) modules from \s-1CPAN\s0 against perl 5.10 or older, or
modules that used to be XS-based but switched to pure perl at some
version.
.Sp
If you run cpanm as root and use \f(CW\*(C`INSTALL_BASE\*(C'\fR or equivalent to
specify custom installation path, you \s-1SHOULD\s0 disable this option so
you won't accidentally uninstall dual-life modules from the core
include path.
.Sp
Defaults to true if your perl version is smaller than 5.12, and you
can disable that with \f(CW\*(C`\-\-no\-uninst\-shadows\*(C'\fR.
.Sp
\&\fB\s-1NOTE\s0\fR: Since version 1.3000 this flag is turned off by default for
perl newer than 5.12, since with 5.12 \f(CW@INC\fR contains site_perl directory
\&\fIbefore\fR the perl core library path, and uninstalling shadows is not
necessary anymore and does more harm by deleting files from the core
library path.
.IP "\-\-uninstall, \-U" 4
.IX Item "--uninstall, -U"
Uninstalls a module from the library path. It finds a packlist for
given modules, and removes all the files included in the same
distribution.
.Sp
If you enable local::lib, it only removes files from the local::lib
directory.
.Sp
If you try to uninstall a module in \f(CW\*(C`perl\*(C'\fR directory (i.e. core
module), an error will be thrown.
.Sp
A dialog will be prompted to confirm the files to be deleted. If you pass
\&\f(CW\*(C`\-f\*(C'\fR option as well, the dialog will be skipped and uninstallation
will be forced.
.IP "\-\-cascade\-search" 4
.IX Item "--cascade-search"
\&\fB\s-1EXPERIMENTAL\s0\fR: Specifies whether to cascade search when you specify
multiple mirrors and a mirror doesn't have a module or has a lower
version of the module than requested. Defaults to false.
.IP "\-\-skip\-installed" 4
.IX Item "--skip-installed"
Specifies whether a module given in the command line is skipped if its latest
version is already installed. Defaults to true.
.Sp
\&\fB\s-1NOTE\s0\fR: The \f(CW\*(C`PERL5LIB\*(C'\fR environment variable have to be correctly set
for this to work with modules installed using local::lib, unless
you always use the \f(CW\*(C`\-l\*(C'\fR option.
.IP "\-\-skip\-satisfied" 4
.IX Item "--skip-satisfied"
\&\fB\s-1EXPERIMENTAL\s0\fR: Specifies whether a module (and version) given in the
command line is skipped if it's already installed.
.Sp
If you run:
.Sp
.Vb 1
\&  cpanm \-\-skip\-satisfied CGI DBI~1.2
.Ve
.Sp
cpanm won't install them if you already have \s-1CGI\s0 (for whatever
versions) or have \s-1DBI\s0 with version higher than 1.2. It is similar to
\&\f(CW\*(C`\-\-skip\-installed\*(C'\fR but while \f(CW\*(C`\-\-skip\-installed\*(C'\fR checks if the
\&\fIlatest\fR version of \s-1CPAN\s0 is installed, \f(CW\*(C`\-\-skip\-satisfied\*(C'\fR checks if
a requested version (or not, which means any version) is installed.
.Sp
Defaults to false.
.IP "\-\-verify" 4
.IX Item "--verify"
Verify the integrity of distribution files retrieved from \s-1PAUSE\s0 using
\&\s-1CHECKSUMS\s0 and \s-1SIGNATURES\s0 (if found). Defaults to false.
.IP "\-\-report\-perl\-version" 4
.IX Item "--report-perl-version"
Whether it reports the locally installed perl version to the various
web server as part of User-Agent. Defaults to true unless \s-1CI\s0 related
environment variables such as \f(CW\*(C`TRAVIS\*(C'\fR, \f(CW\*(C`CI\*(C'\fR or \f(CW\*(C`AUTOMATED_TESTING\*(C'\fR
is enabled. You can disable it by using \f(CW\*(C`\-\-no\-report\-perl\-version\*(C'\fR.
.IP "\-\-auto\-cleanup" 4
.IX Item "--auto-cleanup"
Specifies the number of days in which cpanm's work directories
expire. Defaults to 7, which means old work directories will be
cleaned up in one week.
.Sp
You can set the value to \f(CW0\fR to make cpan never cleanup those
directories.
.IP "\-\-man\-pages" 4
.IX Item "--man-pages"
Generates man pages for executables (man1) and libraries (man3).
.Sp
Defaults to true (man pages generated) unless \f(CW\*(C`\-L|\-\-local\-lib\-contained\*(C'\fR
option is supplied in which case it's set to false. You can disable
it with \f(CW\*(C`\-\-no\-man\-pages\*(C'\fR.
.IP "\-\-lwp" 4
.IX Item "--lwp"
Uses \s-1LWP\s0 module to download stuff over \s-1HTTP.\s0 Defaults to true, and
you can say \f(CW\*(C`\-\-no\-lwp\*(C'\fR to disable using \s-1LWP,\s0 when you want to upgrade
\&\s-1LWP\s0 from \s-1CPAN\s0 on some broken perl systems.
.IP "\-\-wget" 4
.IX Item "--wget"
Uses \s-1GNU\s0 Wget (if available) to download stuff. Defaults to true, and
you can say \f(CW\*(C`\-\-no\-wget\*(C'\fR to disable using Wget (versions of Wget older
than 1.9 don't support the \f(CW\*(C`\-\-retry\-connrefused\*(C'\fR option used by cpanm).
.IP "\-\-curl" 4
.IX Item "--curl"
Uses cURL (if available) to download stuff. Defaults to true, and
you can say \f(CW\*(C`\-\-no\-curl\*(C'\fR to disable using cURL.
.Sp
Normally with \f(CW\*(C`\-\-lwp\*(C'\fR, \f(CW\*(C`\-\-wget\*(C'\fR and \f(CW\*(C`\-\-curl\*(C'\fR options set to true
(which is the default) cpanm tries \s-1LWP\s0, Wget, cURL and HTTP::Tiny
(in that order) and uses the first one available.
.SH "ENVIRONMENT VARIABLES"
.IX Header "ENVIRONMENT VARIABLES"
.IP "\s-1PERL_CPANM_HOME\s0" 4
.IX Item "PERL_CPANM_HOME"
The directory cpanm should use to store downloads and build and test
modules. Defaults to the \f(CW\*(C`.cpanm\*(C'\fR directory in your user's home
directory.
.IP "\s-1PERL_CPANM_OPT\s0" 4
.IX Item "PERL_CPANM_OPT"
If set, adds a set of default options to every cpanm command. These
options come first, and so are overridden by command-line options.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
App::cpanminus
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2010\- Tatsuhiko Miyagawa.
.SH "AUTHOR"
.IX Header "AUTHOR"
Tatsuhiko Miyagawa
