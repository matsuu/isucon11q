.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.42)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Carton::Doc::Update 3"
.TH Carton::Doc::Update 3 "2018-06-28" "perl v5.34.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Carton::Doc::Update \- Update the dependencies
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  carton update [module]
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Update the dependencies version for your application.
.PP
Carton is designed to update your dependency in a conservative way,
meaning that it doesn't update modules that aren't explicitly required
to.
.PP
\&\f(CW\*(C`carton update\*(C'\fR is a command to explicitly update one or all of
modules in your cpanfile to the latest available that satisfies the
requirements in cpanfile.
.SH "EXAMPLE"
.IX Header "EXAMPLE"
Suppose you have a cpanfile with:
.PP
.Vb 2
\&    requires \*(AqDBI\*(Aq, \*(Aq1.600\*(Aq;
\&    requires \*(AqPlack\*(Aq, \*(Aq== 1.0011\*(Aq;
.Ve
.PP
and then run \f(CW\*(C`carton install\*(C'\fR to get \s-1DBI 1.610\s0 (the latest at that
time) and Plack 1.0011 (as specified in the requirement).
.PP
A few weeks later, \s-1DBI\s0 and Plack have been updated a couple of
times. Running \f(CW\*(C`carton install\*(C'\fR \fIwon't\fR update the versions, because
the installed versions satisfy the requirements in \f(CW\*(C`cpanfile\*(C'\fR.
.PP
Running \f(CW\*(C`carton update\*(C'\fR will update \s-1DBI\s0 to the latest version, say
1.611, because the version still satisfies the requirement. However,
it won't update Plack's version, since whatever latest version on \s-1CPAN\s0
will not satisfy the Plack's requirement \f(CW\*(C`== 1.0011\*(C'\fR because it wants
an exact version.
